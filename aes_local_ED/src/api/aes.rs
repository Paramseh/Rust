pub fn aes_256_encode(password: &[u8; 32], data: &[u8; 16]) -> [u8; 16] {
    let w = key_expansion(password);
    cipher(data, &w)
}

pub fn aes_256_decode(password: &[u8; 32], data: &[u8; 16]) -> [u8; 16] {
    let w = key_expansion(password);
    inv_cipher(data, &w)
}

const NB: usize = 4;

const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const INV_S_BOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

const R_CON: [[u8; 4]; 11] = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
];

fn cipher(input: &[u8; 16], w: &Vec<Vec<u8>>) -> [u8; 16] {
    let nr = w.len() / NB - 1;
    let mut state = [[0u8; 4]; 4];

    // Initialize state array from input
    for i in 0..4*NB {
        state[i % 4][i / 4] = input[i];
    }

    state = add_round_key(&state, w, 0);

    for round in 1..nr {
        state = sub_bytes(&state);
        state = shift_rows(&state);
        state = mix_columns(&state);
        state = add_round_key(&state, w, round);
    }

    state = sub_bytes(&state);
    state = shift_rows(&state);
    state = add_round_key(&state, w, nr);

    // Convert state back to output array
    let mut output = [0u8; 16];
    for i in 0..4*NB {
        output[i] = state[i % 4][i / 4];
    }
    output
}

fn inv_cipher(input: &[u8; 16], w: &Vec<Vec<u8>>) -> [u8; 16] {
    let nr = w.len() / 4 - 1;  // Number of rounds
    let mut state = [[0u8; 4]; 4];

    // Initialize state array from input
    for i in 0..16 {
        state[i % 4][i / 4] = input[i];
    }

    // Initial round
    state = add_round_key(&state, w, nr);

    // Main rounds
    for round in (1..nr).rev() {
        state = inv_shift_rows(&state);
        state = inv_sub_bytes(&state);
        state = add_round_key(&state, w, round);
        state = inv_mix_columns(&state);
    }

    // Final round
    state = inv_shift_rows(&state);
    state = inv_sub_bytes(&state);
    state = add_round_key(&state, w, 0);

    // Convert state back to output array
    let mut output = [0u8; 16];
    for i in 0..16 {
        output[i] = state[i % 4][i / 4];
    }
    output
}

fn key_expansion(key: &[u8; 32]) -> Vec<Vec<u8>> {
    let nk = 8; // Key length in 32-bit words for AES-256
    let nr = 14; // Number of rounds for AES-256

    let mut w = vec![vec![0u8; 4]; NB * (nr + 1)];
    let mut temp = vec![0u8; 4];

    // First round key is the key itself
    for i in 0..nk {
        w[i] = vec![
            key[4*i],
            key[4*i + 1],
            key[4*i + 2],
            key[4*i + 3],
        ];
    }

    // Generate the rest of the round keys
    for i in nk..NB*(nr + 1) {
        temp.copy_from_slice(&w[i-1]);
        
        if i % nk == 0 {
            temp = rot_word(&temp);
            temp = sub_word(&temp);
            for t in 0..4 {
                temp[t] ^= R_CON[i/nk][t];
            }
        } else if nk > 6 && i % nk == 4 {
            temp = sub_word(&temp);
        }
        
        w[i] = vec![0u8; 4];
        for t in 0..4 {
            w[i][t] = w[i-nk][t] ^ temp[t];
        }
    }

    w
}

fn sub_bytes(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    for r in 0..4 {
        for c in 0..4 {
            result[r][c] = S_BOX[state[r][c] as usize];
        }
    }
    result
}

fn inv_sub_bytes(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    for r in 0..4 {
        for c in 0..4 {
            result[r][c] = INV_S_BOX[state[r][c] as usize];
        }
    }
    result
}

fn shift_rows(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    result[0] = state[0];
    
    // Shift row 1 left by 1
    result[1][0] = state[1][1];
    result[1][1] = state[1][2];
    result[1][2] = state[1][3];
    result[1][3] = state[1][0];
    
    // Shift row 2 left by 2
    result[2][0] = state[2][2];
    result[2][1] = state[2][3];
    result[2][2] = state[2][0];
    result[2][3] = state[2][1];
    
    // Shift row 3 left by 3
    result[3][0] = state[3][3];
    result[3][1] = state[3][0];
    result[3][2] = state[3][1];
    result[3][3] = state[3][2];
    
    result
}

fn inv_shift_rows(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    result[0] = state[0];
    
    // Shift row 1 right by 1
    result[1][0] = state[1][3];
    result[1][1] = state[1][0];
    result[1][2] = state[1][1];
    result[1][3] = state[1][2];
    
    // Shift row 2 right by 2
    result[2][0] = state[2][2];
    result[2][1] = state[2][3];
    result[2][2] = state[2][0];
    result[2][3] = state[2][1];
    
    // Shift row 3 right by 3
    result[3][0] = state[3][1];
    result[3][1] = state[3][2];
    result[3][2] = state[3][3];
    result[3][3] = state[3][0];
    
    result
}

fn mix_columns(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    
    for c in 0..4 {
        let s0 = state[0][c];
        let s1 = state[1][c];
        let s2 = state[2][c];
        let s3 = state[3][c];
        
        result[0][c] = gmul(0x02, s0) ^ gmul(0x03, s1) ^ s2 ^ s3;
        result[1][c] = s0 ^ gmul(0x02, s1) ^ gmul(0x03, s2) ^ s3;
        result[2][c] = s0 ^ s1 ^ gmul(0x02, s2) ^ gmul(0x03, s3);
        result[3][c] = gmul(0x03, s0) ^ s1 ^ s2 ^ gmul(0x02, s3);
    }
    
    result
}

fn inv_mix_columns(state: &[[u8; 4]; 4]) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    
    for c in 0..4 {
        let s0 = state[0][c];
        let s1 = state[1][c];
        let s2 = state[2][c];
        let s3 = state[3][c];
        
        result[0][c] = gmul(0x0e, s0) ^ gmul(0x0b, s1) ^ gmul(0x0d, s2) ^ gmul(0x09, s3);
        result[1][c] = gmul(0x09, s0) ^ gmul(0x0e, s1) ^ gmul(0x0b, s2) ^ gmul(0x0d, s3);
        result[2][c] = gmul(0x0d, s0) ^ gmul(0x09, s1) ^ gmul(0x0e, s2) ^ gmul(0x0b, s3);
        result[3][c] = gmul(0x0b, s0) ^ gmul(0x0d, s1) ^ gmul(0x09, s2) ^ gmul(0x0e, s3);
    }
    
    result
}

fn sub_word(w: &[u8]) -> Vec<u8> {
    let mut result = vec![0u8; 4];
    for i in 0..4 {
        result[i] = S_BOX[w[i] as usize];
    }
    result
}

fn rot_word(w: &[u8]) -> Vec<u8> {
    vec![w[1], w[2], w[3], w[0]]
}

fn gmul(a: u8, b: u8) -> u8 {
    let mut p = 0u8;
    let mut counter = 0u8;
    let mut hi_bit_set;
    let mut temp_a = a;
    let mut temp_b = b;
    
    while counter < 8 {
        if (temp_b & 1) != 0 {
            p ^= temp_a;
        }
        hi_bit_set = (temp_a & 0x80) != 0;
        temp_a <<= 1;
        if hi_bit_set {
            temp_a ^= 0x1b;
        }
        temp_b >>= 1;
        counter += 1;
    }
    p
}

fn add_round_key(state: &[[u8; 4]; 4], w: &Vec<Vec<u8>>, round: usize) -> [[u8; 4]; 4] {
    let mut result = [[0u8; 4]; 4];
    for r in 0..4 {
        for c in 0..4 {
            result[r][c] = state[r][c] ^ w[round * 4 + c][r];
        }
    }
    result
}
